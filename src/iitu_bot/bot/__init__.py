"""Telegram bot module with RAG integration"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
import google.generativeai as genai
from typing import Dict, List, Optional
from ..config import Config
from ..database import VectorDatabase

logger = logging.getLogger(__name__)

class IITUTelegramBot:
    """IITU Telegram bot with RAG capabilities"""
    
    def __init__(self):
        # Initialize bot and dispatcher
        self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        
        # Initialize Gemini AI
        genai.configure(api_key=Config.GEMINI_API_KEY)
        self.ai_model = genai.GenerativeModel('gemini-pro')
        
        # Initialize vector database
        self.vector_db = VectorDatabase()
        
        # User sessions for retry logic
        self.user_sessions: Dict[int, Dict] = {}
        
        # Register handlers
        self._register_handlers()
        
        logger.info("IITU Telegram Bot initialized")
    
    def _register_handlers(self):
        """Register message handlers"""
        
        @self.dp.message(CommandStart())
        async def start_handler(message: Message):
            await self.handle_start(message)
        
        @self.dp.message(Command('help'))
        async def help_handler(message: Message):
            await self.handle_help(message)
        
        @self.dp.message(Command('return'))
        async def return_handler(message: Message):
            await self.handle_return(message)
        
        @self.dp.message(F.text)
        async def text_handler(message: Message):
            await self.handle_text(message)
    
    async def handle_start(self, message: Message):
        """Handle /start command"""
        welcome_text = """
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IITU Assistant!

–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (IITU).

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ù–æ–≤–æ—Å—Ç—è—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
‚Ä¢ –ò –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        
        await message.answer(welcome_text)
        
        # Initialize user session
        self.user_sessions[message.from_user.id] = {
            'retry_count': 0,
            'last_query': None,
            'context': []
        }
    
    async def handle_help(self, message: Message):
        """Handle /help command"""
        help_text = """
üìñ IITU Assistant - –°–ø—Ä–∞–≤–∫–∞

üîç –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–∞–∑–∞—Ö—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –Ø –æ—Ç–≤–µ—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IITU
‚Ä¢ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /return –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è

ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/return - –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å (–¥–æ 3 —Ä–∞–∑)

üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ö–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –µ—Å—Ç—å –≤ IITU?"
‚Ä¢ "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç?"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ IT"
‚Ä¢ "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏"

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π IITU.
        """
        
        await message.answer(help_text)
    
    async def handle_return(self, message: Message):
        """Handle /return command for query refinement"""
        user_id = message.from_user.id
        
        if user_id not in self.user_sessions:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return
        
        session = self.user_sessions[user_id]
        
        if not session['last_query']:
            await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.")
            return
        
        if session['retry_count'] >= Config.MAX_RETRIES:
            await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.")
            return
        
        session['retry_count'] += 1
        
        # Refine the query using AI
        refined_query = await self.refine_query(session['last_query'], session['context'])
        
        await message.answer(f"üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ {session['retry_count']})...")
        
        # Process the refined query
        await self.process_user_query(message, refined_query, is_refined=True)
    
    async def handle_text(self, message: Message):
        """Handle text messages"""
        user_query = message.text.strip()
        
        if not user_query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
            return
        
        # Initialize session if not exists
        user_id = message.from_user.id
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'retry_count': 0,
                'last_query': None,
                'context': []
            }
        
        # Reset retry count for new query
        self.user_sessions[user_id]['retry_count'] = 0
        self.user_sessions[user_id]['last_query'] = user_query
        
        await self.process_user_query(message, user_query)
    
    async def process_user_query(self, message: Message, query: str, is_refined: bool = False):
        """Process user query with RAG"""
        try:
            # Show typing action
            await self.bot.send_chat_action(message.chat.id, 'typing')
            
            # Search in knowledge base
            search_results = self.vector_db.search(query, n_results=5)
            
            user_id = message.from_user.id
            session = self.user_sessions[user_id]
            
            if search_results and self.vector_db.is_relevant(query):
                # Generate response using RAG
                response = await self.generate_rag_response(query, search_results)
                
                # Add to context
                session['context'].append({
                    'query': query,
                    'response': response,
                    'source': 'rag'
                })
                
            else:
                # Generate general response
                response = await self.generate_general_response(query)
                
                # Add to context
                session['context'].append({
                    'query': query,
                    'response': response,
                    'source': 'general'
                })
            
            # Keep only last 5 interactions in context
            if len(session['context']) > 5:
                session['context'] = session['context'][-5:]
            
            await message.answer(response)
            
        except Exception as e:
            logger.error(f"Error processing query: {str(e)}")
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def generate_rag_response(self, query: str, search_results: List[Dict]) -> str:
        """Generate response using RAG"""
        # Prepare context from search results
        context_chunks = []
        for result in search_results:
            content = result.get('content', '')
            metadata = result.get('metadata', {})
            source_info = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {metadata.get('page_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            context_chunks.append(f"{content}\n({source_info})")
        
        context = "\n\n---\n\n".join(context_chunks)
        
        prompt = f"""
        –¢—ã ‚Äî –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ IITU. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

        –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
        1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        2. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —á–µ—Ç–∫–æ
        3. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ
        4. –°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        5. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
        6. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π

        –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π IITU:
        {context}

        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}

        –û—Ç–≤–µ—Ç:
        """
        
        try:
            response = self.ai_model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            logger.error(f"Error generating RAG response: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    async def generate_general_response(self, query: str) -> str:
        """Generate general response when no relevant knowledge found"""
        prompt = f"""
        –¢—ã ‚Äî –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ IITU. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–≤—è–∑–∞–Ω —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.

        –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
        1. –û—Ç–≤–µ—á–∞–π –≤ —Ä–∞–º–∫–∞—Ö —Å–≤–æ–µ–π —Ä–æ–ª–∏ –∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç IITU
        2. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º, –≤–µ–∂–ª–∏–≤–æ –Ω–∞–ø—Ä–∞–≤—å –∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º —Ç–µ–º–∞–º
        3. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
        4. –°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        5. –ü—Ä–µ–¥–ª–∞–≥–∞–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}

        –û—Ç–≤–µ—Ç:
        """
        
        try:
            response = self.ai_model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            logger.error(f"Error generating general response: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å IITU. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —Å–∞–π—Ç—É iitu.edu.kz –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
    
    async def refine_query(self, original_query: str, context: List[Dict]) -> str:
        """Refine user query using AI"""
        context_text = ""
        if context:
            recent_context = context[-3:]  # Use last 3 interactions
            for item in recent_context:
                context_text += f"–ó–∞–ø—Ä–æ—Å: {item['query']}\n–û—Ç–≤–µ—Ç: {item['response'][:200]}...\n\n"
        
        prompt = f"""
        –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π IITU.

        –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {original_query}

        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:
        {context_text}

        –°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä–∞—è:
        1. –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏ —á–µ—Ç–∫–∞—è
        2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å IITU
        3. –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:
        """
        
        try:
            response = self.ai_model.generate_content(prompt)
            refined = response.text.strip()
            logger.info(f"Query refined: '{original_query}' -> '{refined}'")
            return refined
        except Exception as e:
            logger.error(f"Error refining query: {str(e)}")
            return original_query
    
    async def start_polling(self):
        """Start bot polling"""
        logger.info("Starting IITU Telegram Bot...")
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """Stop the bot"""
        await self.bot.session.close()
        logger.info("IITU Telegram Bot stopped")